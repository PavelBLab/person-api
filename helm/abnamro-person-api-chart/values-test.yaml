environment: test

# Service
service:
  type: LoadBalancer
  port: 20000
  targetPort: 5001

# Deployment
deployment:
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 5001
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 9
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 5001
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 9
  envs:
    - name: SPRING_PROFILES_ACTIVE
      value: test
    - name: SPRING_DATASOURCE_URL
      valueFrom:
        secretKeyRef:
          name: abnamro-person-api
          key: DB_URL
    - name: SPRING_DATASOURCE_USERNAME
      valueFrom:
        secretKeyRef:
          name: abnamro-person-api
          key: DB_USERNAME
    - name: SPRING_DATASOURCE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: abnamro-person-api
          key: DB_PASSWORD

# Kind: ConfigMap
configMap:
  data:
    springProfilesActive: test
    serverPort: 5001
    initDbSh: |
      #!/bin/bash
      # Make the script executable
      chmod +x /docker-entrypoint-initdb.d/init-db.sh
  
      # Wait for PostgreSQL to be ready
      until pg_isready -h localhost -p 5432; do
      echo "Waiting for PostgreSQL to start..."
      sleep 2
      done
  
      # Run the SQL command to create the schema
      psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "CREATE SCHEMA IF NOT EXISTS person;"


# Secret
secret:
  dbUrl: amRiYzpwb3N0Z3Jlc3FsOi8vcG9zdGdyZXMucGVyc29uLWFwaS10ZXN0LnN2Yy5jbHVzdGVyLmxvY2FsOjE1MDAwL3Rlc3RjYXNlP2N1cnJlbnRTY2hlbWE9cGVyc29uJnVzZVVuaWNvZGU9dHJ1ZSZjaGFyYWN0ZXJFbmNvZGluZz1VVEY4
  dbUserName: cG9zdGdyZXM=
  dbPassword: cG9zdGdyZXM=



# Child Chart: Postgres
postgres-chart:

  includePostgresChart: true

  # General
  fullnameOverride: "postgres" # metadata name
  nameOverride: "postgres"
  labels: { }

  # Kind: Service
  service:
    type: LoadBalancer
    port: 15000
    targetPort: 5432

  # Kind: Deployment
  deployment:
    replicaCount: 1
    image:
      repository: postgres
      pullPolicy: Always
      tag: 16.4
    envs:
      - name: POSTGRES_DB
        value: testcase
      - name: POSTGRES_USER
        valueFrom:
          secretKeyRef:
            name: abnamro-person-api
            key: DB_USERNAME
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: abnamro-person-api
            key: DB_PASSWORD
    volumeMounts:
      - name: container-postgres-storage
        mountPath: /var/lib/postgresql/data
      - name: init-script
        mountPath: /docker-entrypoint-initdb.d/init-db.sh
        subPath: initDbSh
    volumes:
      - name: container-postgres-storage
        persistentVolumeClaim:
          claimName: postgres
      - name: init-script
        configMap:
          name: abnamro-person-api

  # Kind: StorageAccount
  storageClass:
    metadata:
      name: manual
    provisioner: kubernetes.io/no-provisioner
    volumeBindingMode: WaitForFirstConsumer

  # Kind: PersistentVolume
  persistentVolume:
    spec:
      capacity:
        storage: 100Mi
      accessModes:
        - ReadWriteOnce
      hostPath:
        path: "/mnt/data/postgres"

  # Kind: PersistentVolumeClaim
  persistentVolumeClaim:
    spec:
      resources:
        requests:
          storage: 10Mi